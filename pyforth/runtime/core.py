from pyforth.core import WORD, XT

from . import (
    arithmetic,
    branching,
    comments,
    comparison,
    doloop,
    heap,
    logical,
    loops,
    output,
    primitives,
    stacks,
    fixed_point,
    strings,
)


dictionary: dict[WORD, XT] = {
    "\\": comments.xt_c_eol_comment,
    "(": comments.xt_c_definition_comment,
    ":": primitives.xt_c_colon,
    ";": primitives.xt_c_semi,
    "'": primitives.xt_r_tick,
    "[']": primitives.xt_c_bracket_tick,
    "compile,": primitives.xt_c_compile_comma,
    "execute": primitives.xt_r_execute,
    '[compile]': primitives.xt_c_bracket_compile,
    "postpone": primitives.xt_c_postpone,
    "immediate": primitives.xt_r_immediate,
    "recurse": primitives.xt_c_recurse,
    "if": branching.xt_c_if,
    "else": branching.xt_c_else,
    "then": branching.xt_c_then,
    "begin": loops.xt_c_begin,
    'again': loops.xt_c_again,
    "until": loops.xt_c_until,
    "while": loops.xt_c_while,
    "repeat": loops.xt_c_repeat,
    "do": doloop.xt_c_do,
    "loop": doloop.xt_c_loop,
    'exit': primitives.xt_c_exit,
    'i': doloop.loop_index_factory(1, 'i'),
    'j': doloop.loop_index_factory(2, 'j'),
    'k': doloop.loop_index_factory(3, 'k'),
    "+": arithmetic.xt_r_add,
    "-": arithmetic.xt_r_sub,
    "/": arithmetic.xt_r_div,
    'mod': arithmetic.xt_r_mod,
    "*": arithmetic.xt_r_mul,
    'depth': stacks.xt_r_depth,
    "drop": stacks.xt_r_drop,
    "pick": stacks.xt_r_pick,
    "swap": stacks.xt_r_swap,
    'emit': output.xt_r_emit,
    ".": output.xt_r_dot,
    "dump": output.xt_r_dump,
    "=": comparison.xt_r_eq,
    ">": comparison.xt_r_gt,
    "<": comparison.xt_r_lt,
    'and': logical.xt_r_and,
    'or': logical.xt_r_or,
    'invert': logical.xt_r_invert,
    'xor': logical.xt_r_xor,
    ",": heap.xt_r_coma,
    "@": heap.xt_r_at,
    "!": heap.xt_r_bang,
    ">r": stacks.xt_r_to_rs,
    "r>": stacks.xt_r_from_rs,
    "r@": stacks.xt_r_rs_at,
    "allot": heap.xt_r_allot,
    "create": primitives.xt_r_create,
    "does>": primitives.xt_r_does,
    'here': heap.xt_r_here,
    "fliteral": fixed_point.xt_r_f_literal,
    ".f": fixed_point.xt_r_dot_f,
    "f+": arithmetic.xt_r_add,
    "f-": arithmetic.xt_r_sub,
    "f*": fixed_point.xt_r_f_mul,
    'f/': fixed_point.xt_r_f_div,
    ".\"": strings.xt_c_dot_quote,
    "s\"": strings.xt_c_s_quote,
    "type": strings.xt_r_type,
}
